---
// Componente para seleção de idioma
---

<div class="language-selector">
  <div class="language-dropdown">
    <button id="language-trigger" class="language-trigger">
      <span class="current-language">
        <span class="flag">🇪🇸</span>
        <span class="language-name">ES</span>
      </span>
      <svg class="dropdown-arrow" width="12" height="8" viewBox="0 0 12 8" fill="none">
        <path d="M1 1.5L6 6.5L11 1.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    
    <div id="language-menu" class="language-menu">
      <div class="language-option" data-value="es">
        <span class="flag">🇪🇸</span>
        <span class="language-name">Español</span>
      </div>
      <div class="language-option" data-value="pt">
        <span class="flag">🇧🇷</span>
        <span class="language-name">Português</span>
      </div>
      <div class="language-option" data-value="en">
        <span class="flag">🇺🇸</span>
        <span class="language-name">English</span>
      </div>
      <div class="language-option" data-value="fr">
        <span class="flag">🇫🇷</span>
        <span class="language-name">Français</span>
      </div>
      <div class="language-option" data-value="de">
        <span class="flag">🇩🇪</span>
        <span class="language-name">Deutsch</span>
      </div>
      <div class="language-option" data-value="it">
        <span class="flag">🇮🇹</span>
        <span class="language-name">Italiano</span>
      </div>
      <div class="language-option" data-value="ja">
        <span class="flag">🇯🇵</span>
        <span class="language-name">日本語</span>
      </div>
      <div class="language-option" data-value="ko">
        <span class="flag">🇰🇷</span>
        <span class="language-name">한국어</span>
      </div>
      <div class="language-option" data-value="zh">
        <span class="flag">🇨🇳</span>
        <span class="language-name">中文</span>
      </div>
      <div class="language-option" data-value="ar">
        <span class="flag">🇸🇦</span>
        <span class="language-name">العربية</span>
      </div>
      <div class="language-option" data-value="ru">
        <span class="flag">🇷🇺</span>
        <span class="language-name">Русский</span>
      </div>
    </div>
  </div>
</div>

<script>
  import { traduzirTexto } from '../utils/translation.ts';

  // Função para traduzir elementos do DOM
  async function traduzirElementos(idiomaAlvo: string) {
    // Elementos que devem ser traduzidos
    const elementosParaTraduzir = document.querySelectorAll('[data-translate]');
    
    for (const elemento of elementosParaTraduzir) {
      const textoOriginal = elemento.getAttribute('data-original-text') || elemento.textContent;
      
      if (textoOriginal && textoOriginal.trim()) {
        try {
          const textoTraduzido = await traduzirTexto(textoOriginal, idiomaAlvo);
          elemento.textContent = textoTraduzido;
        } catch (error) {
          console.error('Erro ao traduzir elemento:', error);
        }
      }
    }
  }

  // Função para salvar idioma preferido
  function salvarIdiomaPreferido(idioma: string) {
    localStorage.setItem('idioma-preferido', idioma);
  }

  // Função para carregar idioma preferido
  function carregarIdiomaPreferido(): string {
    return localStorage.getItem('idioma-preferido') || 'es';
  }

  // Mapeamento de idiomas para exibição
  const languageMap = {
    'es': { flag: '🇪🇸', name: 'ES', fullName: 'Español' },
    'pt': { flag: '🇧🇷', name: 'PT', fullName: 'Português' },
    'en': { flag: '🇺🇸', name: 'EN', fullName: 'English' },
    'fr': { flag: '🇫🇷', name: 'FR', fullName: 'Français' },
    'de': { flag: '🇩🇪', name: 'DE', fullName: 'Deutsch' },
    'it': { flag: '🇮🇹', name: 'IT', fullName: 'Italiano' },
    'ja': { flag: '🇯🇵', name: 'JP', fullName: '日本語' },
    'ko': { flag: '🇰🇷', name: 'KR', fullName: '한국어' },
    'zh': { flag: '🇨🇳', name: 'CN', fullName: '中文' },
    'ar': { flag: '🇸🇦', name: 'SA', fullName: 'العربية' },
    'ru': { flag: '🇷🇺', name: 'RU', fullName: 'Русский' }
  };

  // Função para atualizar o display do idioma selecionado
  function updateLanguageDisplay(idioma: string) {
    const trigger = document.getElementById('language-trigger');
    const currentLanguage = trigger?.querySelector('.current-language');
    
    if (trigger && currentLanguage && languageMap[idioma as keyof typeof languageMap]) {
      const lang = languageMap[idioma as keyof typeof languageMap];
      const flag = currentLanguage.querySelector('.flag');
      const name = currentLanguage.querySelector('.language-name');
      
      if (flag) flag.textContent = lang.flag;
      if (name) name.textContent = lang.name;
    }
  }

  // Event listener para mudança de idioma
  document.addEventListener('DOMContentLoaded', () => {
    const trigger = document.getElementById('language-trigger');
    const menu = document.getElementById('language-menu');
    const options = document.querySelectorAll('.language-option');
    
    if (trigger && menu) {
      // Carregar idioma salvo
      const idiomaSalvo = carregarIdiomaPreferido();
      updateLanguageDisplay(idiomaSalvo);
      
      // Traduzir conteúdo inicial
      if (idiomaSalvo !== 'es') {
        traduzirElementos(idiomaSalvo);
      }
      
      // Toggle do menu
      trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        menu.classList.toggle('active');
        trigger.classList.toggle('active');
      });
      
      // Fechar menu ao clicar fora
      document.addEventListener('click', () => {
        menu.classList.remove('active');
        trigger.classList.remove('active');
      });
      
      // Seleção de idioma
      options.forEach(option => {
        option.addEventListener('click', async (e) => {
          e.stopPropagation();
          const idiomaSelecionado = option.getAttribute('data-value');
          
          if (idiomaSelecionado) {
            // Atualizar display
            updateLanguageDisplay(idiomaSelecionado);
            
            // Salvar preferência
            salvarIdiomaPreferido(idiomaSelecionado);
            
            // Fechar menu
            menu.classList.remove('active');
            trigger.classList.remove('active');
            
            // Traduzir conteúdo
            if (idiomaSelecionado !== 'es') {
              await traduzirElementos(idiomaSelecionado);
            } else {
              // Se voltar ao espanhol, restaurar textos originais
              const elementosParaTraduzir = document.querySelectorAll('[data-translate]');
              elementosParaTraduzir.forEach(elemento => {
                const textoOriginal = elemento.getAttribute('data-original-text');
                if (textoOriginal) {
                  elemento.textContent = textoOriginal;
                }
              });
            }
          }
        });
      });
    }
  });
</script>

<style>
  .language-selector {
    position: relative;
    z-index: 1000;
  }
  
  .language-dropdown {
    position: relative;
    display: inline-block;
  }
  
  .language-trigger {
    display: flex;
    align-items: center;
    gap: 8px;
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 8px 12px;
    color: white;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    min-width: 60px;
    justify-content: space-between;
  }
  
  .language-trigger:hover {
    background: rgba(0, 0, 0, 0.6);
    border-color: rgba(255, 255, 255, 0.4);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
  .language-trigger.active {
    background: rgba(0, 0, 0, 0.7);
    border-color: rgba(59, 130, 246, 0.6);
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
  }
  
  .current-language {
    display: flex;
    align-items: center;
    gap: 6px;
  }
  
  .flag {
    font-size: 16px;
    line-height: 1;
  }
  
  .language-name {
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.5px;
  }
  
  .dropdown-arrow {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    color: rgba(255, 255, 255, 0.7);
  }
  
  .language-trigger.active .dropdown-arrow {
    transform: rotate(180deg);
    color: rgba(59, 130, 246, 0.8);
  }
  
  .language-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    margin-top: 4px;
    padding: 8px 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    min-width: 140px;
    max-height: 300px;
    overflow-y: auto;
    will-change: opacity, transform;
  }
  
  .language-menu.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .language-option {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 16px;
    color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
    font-size: 14px;
    font-weight: 500;
  }
  
  .language-option:hover {
    background: rgba(59, 130, 246, 0.1);
    color: white;
  }
  
  .language-option .flag {
    font-size: 18px;
    line-height: 1;
  }
  
  .language-option .language-name {
    font-size: 14px;
    font-weight: 500;
  }
  
  /* Scrollbar personalizado */
  .language-menu::-webkit-scrollbar {
    width: 4px;
  }
  
  .language-menu::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  }
  
  .language-menu::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
  }
  
  .language-menu::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  /* Responsividade */
  @media (max-width: 768px) {
    .language-trigger {
      padding: 6px 10px;
      font-size: 12px;
    }
    
    .language-menu {
      min-width: 120px;
    }
    
    .language-option {
      padding: 8px 12px;
      font-size: 13px;
    }
  }
  
  /* Animação de entrada */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .language-menu.active {
    animation: slideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>
